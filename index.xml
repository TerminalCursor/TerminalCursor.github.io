<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FOSS Website</title>
    <link>http://TerminalCursor.github.io/</link>
    <description>Recent content on FOSS Website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 May 2020 11:47:01 -0700</lastBuildDate>
    
	<atom:link href="http://TerminalCursor.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Project Overview</title>
      <link>http://TerminalCursor.github.io/projects/nasm/disk/project_overview/</link>
      <pubDate>Fri, 08 May 2020 11:47:01 -0700</pubDate>
      
      <guid>http://TerminalCursor.github.io/projects/nasm/disk/project_overview/</guid>
      <description>build: main.asm nasm -f elf64 -o main.o main.asm ld main.o -o build chmod +x build clean: rm -rf build main.o nameData.dat section .data fileName db &amp;#34;./data.dat&amp;#34;, 0 varDB db &amp;#39;Hello there, this is a very long message to be written to a file&amp;#39;, 0x0A varDBL equ $ - varDB section .bss fileData resb 200 section .text global _start _start: ;; File Create fcreate: mov rax, 85	;; File Create 	mov rdi, fileName	;; File Name 	mov rsi, 644q	;; rw-r--r-- 	syscall ;; File open fopen: mov rax, 0x02	;; File Open 	mov rdi, fileName	;; File Name 	mov rsi, 02	;; RDWR 	syscall ;; File handle in rax  ;; File write fwrite: mov rdi, rax	;; File handler to rdi 	mov rax, 1	;; Write to file 	mov rsi, varDB	;; Data to write 	mov rdx, varDBL	;; Data length 	syscall ;; File read fread: mov rdi, rax	;; File handler 	mov rax, 0	;; Read 	mov rsi, fileData	;; File data 	mov rdx, 200	;; File data max length 	syscall ;; File close fclose: mov rdi, rax	;; File handler 	mov rax, 3	;; File Close 	syscall ;; Print stuff print: mov rax, 1	;; Write 	mov rdi, 1	;; STDOUT 	mov rsi, fileData	;; Buffer 	mov rdx, 200	;; Length 	syscall ;; Exit exit: mov rax, 60	;; Exit 	mov rdi, 0	;; Exit code 	syscall section .</description>
    </item>
    
    <item>
      <title>Main Function</title>
      <link>http://TerminalCursor.github.io/code/asm_main/</link>
      <pubDate>Fri, 08 May 2020 11:41:10 -0700</pubDate>
      
      <guid>http://TerminalCursor.github.io/code/asm_main/</guid>
      <description>global _start extern printHex extern getStr extern printStr extern createFile extern deleteFile extern appendToFile extern writeToFile section .data prompts db &amp;#34;Please enter your name: &amp;#34; outP db &amp;#34;Hello: &amp;#34; fileName db &amp;#34;./nameData.dat&amp;#34;,0x00 fileSucc db &amp;#34;File Write Successful&amp;#34; fileFail db &amp;#34;File Write Failed&amp;#34; section .bss data times 20 resb 0x20 charInput resb 0x20 section .text _start: ;; 	;; Conditional Removal of File 	;; 	lea rdi, [charInput]	;; One byte buffer 	mov rsi, 1	;; One byte 	call getStr	;; Read  mov rdi, [charInput]	;; Load user input 	cmp rdi, 0x79	;; Check if &amp;#39;y&amp;#39; 	je remFile	;; Remove if &amp;#39;y&amp;#39; 	jmp wFile	;; Else get the data  remFile: lea rdi, [fileName]	;; Get the file name 	call deleteFile	;; Delete the file 	mov rdi, rax	;; Move return code 	call printHex	;; Print the hex of the return code in rdi 	jmp exit wFile: ;; 	;; Get Name 	;; 	lea rdi, [prompts]	;; Prompt location 	mov rsi, 24	;; Prompt length 	call printStr	;; Write to STDOUT  lea rdi, [data]	;; Name location 	mov rsi, 20	;; Name max length 	call getStr	;; Read STDIN  lea rdi, [outP]	;; Print the Hello message 	mov rsi, 7	;; Length of message 	call printStr	;; Write to STDOUT  lea rdi, [data]	;; Location of the name 	mov rsi, 20	;; Max length 	call printStr	;; Write to STDOUT  ;; WRITE NAME TO FILE 	lea rdi, [fileName]	;; Filename - first parameter 	lea rsi, [data]	;; File data - second parameter 	mov rdx, 20	;; Buffer length - third parameter 	call appendToFile	;; Write to file, creating if doesn&amp;#39;t exist  cmp rax, 0x0	;; Check if the write was successful 	je fileSuccessfulWrite	;; If so, say so, else say that it didn&amp;#39;t and exit  fileFailWrite: lea rdi, [fileFail]	;; Write Fail Message 	mov rsi, 17	;; Write Fail Message Length 	call printStr	;; Write to STDOUT  jmp exit	;; Exit  fileSuccessfulWrite: lea rdi, [fileSucc]	;; Write Successful Message 	mov rsi, 21	;; Write Successful Message Length 	call printStr	;; Write to STDOUT  jmp exit exit: ;; 	;; Exit 	;; 	mov rax, 60	;; Exit 	mov rdi, 0	;; Exit code 	syscall </description>
    </item>
    
    <item>
      <title>C Library</title>
      <link>http://TerminalCursor.github.io/code/c_library/</link>
      <pubDate>Fri, 08 May 2020 11:31:47 -0700</pubDate>
      
      <guid>http://TerminalCursor.github.io/code/c_library/</guid>
      <description>#include &amp;lt;stdio.h&amp;gt; extern int printHex(int); extern int getStr(char*, int); extern int printStr(char*,int); extern int createFile(char*); extern int deleteFile(char*); extern int appendToFile(char*,char*,int); extern int writeToFile(char*,char*,int); #define	OK	0 #define	NO_INPUT	1 #define	TOO_LONG	2  // Print a given integer in hex form, helpful for debugging int printHex(int a) { printf(&amp;#34;0x%08X\n&amp;#34;, a); return 0; } // Safe input method static int getLine(char* buff, int size) { int ch, extra; fflush(stdout); int broken = 1; for(int i = 0; i &amp;lt; size; i++) { ch = getchar(); if(ch == EOF || ch == &amp;#39;\n&amp;#39;) { if(i == 0) return NO_INPUT; broken = 0; break; } else buff[i] = ch; } if(broken == 1){ while((getchar()) !</description>
    </item>
    
    <item>
      <title>Post 0002 - Physics Stuff</title>
      <link>http://TerminalCursor.github.io/posts/post-0002/</link>
      <pubDate>Thu, 07 May 2020 11:51:17 -0700</pubDate>
      
      <guid>http://TerminalCursor.github.io/posts/post-0002/</guid>
      <description>Physics Stuff Things to read up on  Lattice QCD Convolutional Neural Networks - Fluid Dynamics  </description>
    </item>
    
    <item>
      <title>Post 0001 - TempleOS</title>
      <link>http://TerminalCursor.github.io/posts/post-0001/</link>
      <pubDate>Thu, 07 May 2020 11:47:35 -0700</pubDate>
      
      <guid>http://TerminalCursor.github.io/posts/post-0001/</guid>
      <description>TempleOS is an Operating System made by Terry Davis Some links I find useful  Home Boot DVD Online Files Extended Read Info  </description>
    </item>
    
    <item>
      <title>Post 0000 - Links</title>
      <link>http://TerminalCursor.github.io/posts/post-0000/</link>
      <pubDate>Sat, 02 May 2020 18:50:57 -0700</pubDate>
      
      <guid>http://TerminalCursor.github.io/posts/post-0000/</guid>
      <description>This post will serve as a post to keep track of various links I find useful Programming Related  Build Your Own X Blog  Operating System Reated Customization/ Software  Cat V Minimalism Suckless Gentoo Wiki Ricing/Customization Raspberry Pi Color Schemes  Development  OS Dev Forum Operating System Tutorial 0xAX Assembly Interrupt Table Syscall Table x64 Linux NASM Reference NASM Material 1 NASM Material 2  Computer Security  Hacker 101 PWKOSCP Prep Blog Cryptopals  Other  Overleaf  </description>
    </item>
    
  </channel>
</rss>